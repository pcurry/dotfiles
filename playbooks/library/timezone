#!/usr/bin/env python
# Copyright (c) 2014 Sebastian Wiesner <swiesner@lunaryorn.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import os
import platform

from ansible.module_utils.basic import *


def timezone_osx(module, name):
    _, output, _ = module.run_command(['systemsetup', '-gettimezone'],
                                      check_rc=True)
    output = output.strip()
    if not output.startswith('Time Zone: '):
        module.fail_json(msg='Failed to parse timezone from ' + repr(output))
    changed = name != output[11:]
    if changed and not module.check_mode:
        module.run_command(['systemsetup', '-settimezone', name],
                           check_rc=True)
    module.exit_json(name=name, changed=changed, message='OK')


def timezone_linux(module, name):
    target = os.path.join('/usr/share/zoneinfo', name)
    if not os.path.exists(target):
        module.fail_json(msg='Time zone {0!r} does not exist!'.format(name))
    if os.path.islink('/etc/localtime'):
        changed = not os.path.samefile(
            target, os.path.readlink('/etc/localtime'))
    else:
        # If we can't determine the old zone, we'll just forcibly change it
        changed = True
    if changed and not module.check_mode:
        module.run_command(['ln', '-sf', target, '/etc/localtime'],
                           check_rc=True)
    module.exit_json(name=name, changed=changed, message='OK')


HANDLERS = {'Darwin': timezone_osx,
            'Linux': timezone_linux}


def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True),
        ),
        supports_check_mode=True
    )

    handler = HANDLERS.get(platform.system())
    if handler:
        handler(module, **module.params)
    else:
        module.fail_json(msg='Operating system not supported')


main()
