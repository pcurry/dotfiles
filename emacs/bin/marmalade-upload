#!/usr/bin/env python2
# -*- coding: utf-8; -*-
# Copyright (c) 2014 Sebastian Wiesner <lunaryorn@gmail.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


"""Upload files to Marmalade."""

from __future__ import print_function, unicode_literals


import sys

if sys.version_info[:2] != (2, 7):
    sys.exit('This script needs Python 2.7!')


import os
import getpass
import subprocess
from getpass import getpass
from argparse import ArgumentParser

try:
    import requests
except ImportError:
    sys.exit('Requests missing.  Install with pip install --user requests')

try:
    import keyring
except ImportError:
    keyring = None
    print('keyring not available.  Token storage is not available!',
          file=sys.stderr)


SERVICE = 'lunaryorn/marmalade_upload'
PACKAGE_MIMETYPES = set(['application/x-tar', 'text/x-lisp'])


class BadRequestError(Exception):
    pass

class NoPermissionError(Exception):
    pass


class Marmalade(object):

    BASE_URL = 'http://marmalade-repo.org/v1'

    def __init__(self, username, token=None):
        self.session = requests.Session()
        self.session.headers.update(
            {'Accept': 'application/json',
             'User-Agent': SERVICE})
        self.username = username
        self.base_url = self.BASE_URL
        self.token = token

    def _endpoint(self, endpoint):
        return self.base_url + endpoint

    def login(self, password):
        data = {'name': self.username, 'password': password}
        response = self.session.post(self._endpoint('/users/login'), data=data)
        if response.status_code == 400:
            raise BadRequestError()
        else:
            response.raise_for_status()
        self.token = response.json()['token']

    def upload_package(self, filename):
        with open(filename, 'rb') as source:
            mimetype = subprocess.check_output(
                ['file', '--brief', '--mime-type', filename]).strip()
            if mimetype not in PACKAGE_MIMETYPES:
                raise ValueError('Invalid mimetype: {0}, expected on of {1}'.format(
                    mimetype, ', '.join(sorted(PACKAGE_MIMETYPES))))
            data = {'name': self.username, 'token': self.token}
            files = {'package': source}
            response = self.session.post(
                self._endpoint('/packages'), data=data, files=files)
            if response.status_code == 400:
                raise BadRequestError
            elif response.status_code == 403:
                raise NoPermissionError
            else:
                response.raise_for_status()


def verify_package(filename):
    os.stat(filename)           # To check for existence
    mimetype = subprocess.check_output(
        ['file', '--brief', '--mime-type', filename]).strip()
    if mimetype not in PACKAGE_MIMETYPES:
        raise ValueError('Invalid mimetype: {0}, expected on of {1}'.format(
            mimetype, ', '.join(sorted(PACKAGE_MIMETYPES))))


def get_token(username):
    if keyring:
        return keyring.get_password(SERVICE, username)
    else:
        return None


def set_token(username, token):
    if keyring:
        keyring.set_password(SERVICE, username, token)


def main():
    parser = ArgumentParser(description='Upload packages to Marmalade')
    parser.add_argument('username', help='Your Marmalade username')
    parser.add_argument('filename', help='The package to upload')

    args = parser.parse_args()

    try:
        verify_package(args.filename)
    except ValueError as error:
        sys.exit('{0} is not a valid package: {1}'.format(args.filename, error))
    except OSError as error:
        sys.exit(str(error))

    marmalade = Marmalade(args.username, token=get_token(args.username))
    if not marmalade.token:
        password = getpass('Password (never stored): ')
        if not password:
            return
        try:
            marmalade.login(password)
        except BadRequestError:
            sys.exit('Bad request. Username or password invalid!')

    if not marmalade.token:
        sys.exit('Login failed!')

    set_token(args.username, marmalade.token)

    try:
        marmalade.upload_package(args.filename)
    except BadRequestError:
        sys.exit('Bad request. {0} is no valid package!'.format(args.filename))
    except NoPermissionError:
        sys.exit('No permission to upload {0}'.format(args.filename))


if __name__ == '__main__':
    main()
