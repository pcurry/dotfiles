#!/usr/bin/env python2
# -*- coding: utf-8; -*-
# Copyright (c) 2014 Sebastian Wiesner <lunaryorn@gmail.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


"""Upload files to Marmalade."""

from __future__ import print_function, unicode_literals


import sys

if sys.version_info[:2] != (2, 7):
    sys.exit('This script needs Python 2.7!')


import getpass
import subprocess
from argparse import ArgumentParser


PACKAGE_MIMETYPES = set('application/x-tar', 'text/x-lisp')


def verify_package(filename):
    mimetype = subprocess.check_output(['file', '--brief', '--mime-type',
                                        filename])
    if mimetype not in PACKAGE_MIMETYPES:
        raise ValueError('Invalid mimetype: {0}, expected on of {1}'.format(
            mimetype, ', '.join(sorted(PACKAGE_MIMETYPES))))


def main():
    parser = ArgumentParser(description='Upload packages to Marmalade')
    parser.add_argument('filename', help='The package to upload')

    args = parser.parse_args()

    try:
        verify_package(args.filename)
    except ValueError as error:
        sys.exit('{0} is not a valid package: {1}'.format(args.filename, error))


if __name__ == '__main__':
    main()
